видео 2:00:00
--- --- TCP --- ---

	Основна задача да направи връзка между две устрийства и да я държи жива.
	Ввсяка една машина може да има 65536 паралелни канала за комуникация (портове).
 
----------------------------------------------------------------------------------------------

--- --- HTTP - Hyper Text Transfer Protocol --- ---
	- Протокол, който няма състояние (stateless).
	- Текстов протокол.
	- Работим на най-високо абстрактно ниво на мрежите. 
	- Използва всички изградени мрежи, адресиране, отваряне на заявки, сесии, криптиране и т.н.
	- Работим с изпращане на текстови редове и получаваме текстови отговори.
	- Заявките може да се видят в браузъра. 
	- Важни за програмиста :
		- content-type: application/x-www/form-urlencoded - описва какво точно сме изпратили
		- cookie
		- content-lenght (в байтове, колко да чете)

	HTTP Conversation - Example:
	изпраща се (HTTP Server разбира от това и знае какво да върне):
		HTTP request:
			GET /courses/javascript HTTP/1.1 (заглавен ред / първи)
			Host: www.softuni.bg      (header-и)
			User-Agent: Mozilla/5.0	  (header-и) 	
			<CRLF> (празната линия показва края на главната част на заявката, разделителя на отделните елементи е новия ред)

		- Заглавния ред съдържа 3 главни компонента, разделени с интервал: 
			- име на метод 
			- интервал и сепаратор ( / )
			- адрес(път към ресурса), който исакме да отворим
			- интервал
			- версията, с която се работи (1.0 / 1.1 / 2.0) 			
		- Hader-ът съдържа ключ и стойност, разделени с (: ). След (: ) до края на реда, всичко се приема за стойност към дадения ключ (задължителен).
		- В Host header-а се пише домейна или коя точно програма иска да се стартира (задължителен).
		- В Connentio: keep-alive поддържа връзката отворена (TCP заявката).
		- В Accept-Encoding се разбират сървъра и браузъра как да прехвърлят данни (gzip, deflate, br) за по-бързо зареждане, предотвърдява bottle neck.
		- Чрез бисквитките, може да се накара сървара за запази информация - да остане потребителя log-нат, настройки и др...
		- В Referer се пази информация от къде сме дошли, изпраща се при натискане на линк в браузъра.
		- В User-Agent се съдържа версията на браузъра, операционната система и архитектурата ѝ.
		- Когато има два празни реда, се отделя служебната от другата информация.

	получаваме:	
		HTTP response:
			HTTP/1.1 200 OK
			Date: Mon, 5 Jul 2010 13:09:03 GMT
			Server: Microsoft-HTTPAPI/2.0
			Last-Modified: Mon, 12 Jul 2014 15:33:23 GMT
			Content-Lenght: 54
			Content-Type: text/html; charset=utf-8
			<CRLF>
			<html><title>Hello</title>
			Welcome to out site</html>

		- Същото като в request-a.
		- На 1-я ред се получава:
			- 1) версията на протокола
			- 2) статус код (100 - 599)
			- 3) текстова част на статус кода, който се отнася само до хората и не се отнася за компютрите (във 2.0 го няма)
		- Какъв е сървара и версията му
		- Последно модифицирани - при кеширане / инфо за потербителя
		- Content-Lenght - колко байта има в body-то на response-а
		- За разлика от request-а, в response-а в 99.9% от случаите, има тяло (информация). Тя е след празния ред.
		- Content-Type - показва формата, в който се връща информацията и механизмът за разкодиране


	--- HTTP Methods ---
	
		Основни методи:
			(CRUD)
			- POST   - Create / store a resource (login, register, forum post, contact form...) - позволява в header да се изпрати тяло на заявката (информация за заявката)
			- GET    - Read / retrieve a resource
			- PUT    - Update / modify a resource - (ъпдейт на даден елемент)
			- DELETE - Delete / remove a resource - (триене на даден елемент)
			
		Служебни методи:
			- CONNECT - уеб сокетите (socket)
			- HEAD    - когато искаме само заглавната (служебната) информация (в header-ите), а не цялата заявка
			- OPTIONS - когато исакме да видим друг уеб ресурс
			- TRACE
					
		Място за четене на информация за HTTP / HTTPS - https://developer.mozilla.org			
					
---------------------------------------------------------------------------------------------

--- --- Dev Tools --- ---

		- В браузърите - F12
	За по-разширени функционалности или генериране на HTTP заявка:
		- Rested - Firefox
		- Postman - Chrome
		
---------------------------------------------------------------------------------------------		
		
--- --- Web Server --- ---

	За да имаме HTTP Server, ни трябва нещо да чете и пише информация от интернет. Достъпва се с localhost (127.0.0.1).
	Използваме TCP listener. Избираме кой от конструкторите.
	Използва се безкраен цикъл.	
	
---------------------------------------------------------------------------------------------		

--- --- Uniform Resource Locator (URL) --- ---
	
	http://mysite.com:8080/demo/index.php?id=27&lang=en#lectures
	
	протокол
		://домейн, събдомейн - пълния адрес
					  :номер на порта
						  /път, след домейна до ?
										 ?query string - разделен с &
													    #html link (фрагмент) 

	Когато имаме не латински символи се енкодва (urlencoded).
	Всички символи освен цифрите и латинските букви се енкодват.
	
--- --- Статус код --- ---
	
	1хх - системен статус код, който се използва между браузъра и сървара.
	2хх - статус код за успех. 
	3хх - редиректи - за пренасочване.
	4хх - грешки на сървара (404 Not Found)
	5хх - грешки, които са най-неприятни за програмиста 



