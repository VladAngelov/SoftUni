--- ASP.NET Core ---
	
	--- ASP.NET Core Introduction ---
	
		- Може да се правят различни комбинации - сървиси, IoT проложения, сървърната част на мобилни приложения. 
		- Не изискват уеб сървър програма, за да приема request-овете.
		- Може да се комбинира с Angular, Blazor, SignalaR, WebAPI, Razor Pages, MVC. Blazor замества Razor.
		- Може да run-ва на .NET Core и .NET Framework.
		- Всяка една част може да бъде подменена - много модуларна платформа.
		- Вграден Dependency Injection.
		- Бърз е.
		- Работи на принципа на middlewares - заявката се посреща от различни компоненти, в които могат да се правят проверки и се връща през тях.
		- Поддържа View Engine Razor.
		- С няколко клика се качва в Azure.
		- Стрхотна интеграция с VS.
	
	
	--- ASP.NET Core MVC ---
		
		- При MVC, за да се ъпдейтне едно нещо, се ъпдейтва целия framework.
		- ASP.NET Core MVC ни позволява да правим приложения базирани върху MVC архитектурата.
		- Много бърз.
		- Лесен за тестване - Unit Test -> HttpClient in memory.
		- Вграден Razor.
		- RESTful services with ASP.NET Core Web API.
		- Всичко работи по подразбиране, но може да се конфигурира.
		- Model binding - много важен, взима данните от заявките и ги мапва както трябва.
		- Model validation - работи на сървъра и при клиента (валидации).
		- Автоматично рутиране чрез темплейти, атрибути и т.н.
		- DI
		- Типизорани view-та - VS ще подсказва за грешки.
		- Tag helpers, 
		- Filters, areas, middlewares
		- Автоматични толкъни.
		- Пази автоматично от sql injections.
		- Роли на потербителите, клеймове.
		- И много други. Включено е почти всичко нужно.
		- При редакция на view-тата е нужен само refresh на уеб страницата, но при редакция на друг елемент е нужен rebuild.
		- Има пълен debug.
		
		
	--- Controllers	and Actions ---
		
		--- Controllers ---
			- Мозъка на един MVC Application
			- C# file, който се намира в папака controllers.
			- По конвеенция, името му трябва да завършва на nameController.
			- Routing Engine-а, по подразбиране разделя заявката на няколко части (/ - разделител)- име на контролера / име на метода(action) / id.
 			- Съдържа публични методи, които връщат IActionResult.
				
		--- Actions ---
			- Публични методи в контролера.
			- Нестатични.
			- Не връщат стойности, а най-често IActionResult.
				*пример:
					[атрибути]
					public IActionResult Details (int id)
						{
							var viewModel = this.dataService.GetById(id).To<DetailsViewModel>; 
									    // => от dataService, който е injected, извикваме метод, мапваме към viewModel
							return this.View(viewModel);							
						}
					
			- Може да се променя response-a, за да връща view, json, файл, препращане или каквото искаме.
		
			- Параметри:
				- Action-на може да приема параметри, не само да дава.
				- Model Binding - приема данни от заявката и ги слага като параметри.
		
			- Атрибути
				- ActionName - име за достъпване на метода.
				- NonAction - да не се достъпва от клиента.
				- HttpPost
				- HttpGet - може да се задава адрес, на който да е достъпен.
				- Прилагане на филтри.
				- Контролира се кеша.
				- Огреничаване на размера в байтове на request-a.
		
			
		--- Routing ---
			- От адреса, който потербителя е въвел, определя кой Action, кой контролер и какви данни да поддаде на action-a.
			- Трябва да се описват.
			- Темплейта, по който се преви мапа между request-a и get-a.
			- RouteData - е източник на данни за параметрите на нашия action.
			- Има значение реда на Route-овете, първият валиден поглъща заявката.
			- Conventional Routing - с темплейти, препоръчан.
				- Има темплейти.
				- Основен разделител е "/".
				- name - само за тестване.
				- template - задава се темплейт, в който се задава име на контролер и екшън, ако няма поддадени. 
					- пример (default-ен route):
						routes.MapRoute(
							name: "default",
							template: "{controller=Home}/{action=Index}/{Id?}"
						);
						или 
						app.UseMvcWithDefaultRoute(); 
						
				- Винаги се казва в кой контролер и екшън като подразбиране.
				- slug - замества id-то в адреса и е много по-описателно за потребителя. 
				
			- Route Constraint с регулярен израз казва как трябва да изглежда темплейта - когато и само когато constraint-а (кънстрейнта) е валиден.
				
			- Atribute Routing - повече писане.
				- Позволява да се пишат Route-ове с атрибути.
				- С приоритет.
				- Ще работи в синхрон с другите route темплейти.
			
		
	--- Статични файлове ---
		
		- В папка wwwroot - css, js, favicon.ico, не се слага copy aways.
        - app.UseStaticFiles(); - в  Startup.cs, за да се използват статични файлове, терминален middleware.
	
	
	--- Razor View Engine ---
		- View Engine благодарение, на който комбинация на HTML CSS, inject-ват много неща и да се правят много магии.
		- Вмъкване на C# код в HTML-а.
		- След дефиниране на модела, се включва интелисенса и започва да подсказва.
		- Олеснен синтаксис.
		- Базиран на C#.


	--- Identity ---
		
		- 3:30:00 от видеото за добавяне на identity частта или поне избираеми за редакция.
		- [Authorize] - за да се използва упълномищението на потребителя.
		- Използва се async Task<>.. await - за да не се получава bottle-neck.
	
	
	--- Hot Keys ---
		
		- Ctrl+T -> global search